"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var timeCalc_1 = require("../time/calculations/timeCalc");
function parseTwoLineElement(tleString) {
    var rows = tleString
        .trim()
        .split('\n')
        .map(function (row) { return row.trim(); });
    return __assign(__assign(__assign({}, _parseName(rows)), _parseRowOne(rows)), _parseRowTwo(rows));
}
exports.default = parseTwoLineElement;
function _parseName(rows) {
    var row = rows.find(function (row) { return row.match(/^[A-Za-z]/); });
    return {
        name: row || 'satellite',
    };
}
function _parseRowOne(rows) {
    var row = _findRow(rows, 1);
    return {
        noradNr: parseInt(row.slice(2, 7)),
        classification: row.slice(7, 8).trim(),
        internationalDesignator: row.slice(9, 17).trim(),
        epochYear: (0, timeCalc_1.shortYear2longYear)(row.slice(18, 20)),
        epochDayOfYear: parseFloat(row.slice(20, 32)),
        firstDerivativeMeanMotion: parseFloat(row.slice(33, 43)),
        secondDerivativeMeanMotion: _parseExpString(row.slice(44, 52)),
        dragTerm: _parseExpString(row.slice(53, 61)),
        ephemerisType: parseInt(row.slice(62, 63)),
        setNumber: parseInt(row.slice(64, 68)),
    };
}
function _parseRowTwo(rows) {
    var row = _findRow(rows, 2);
    return {
        catalogNumber: parseInt(row.slice(2, 7)),
        inclination: parseFloat(row.slice(8, 16)),
        rightAscension: parseFloat(row.slice(17, 25)),
        eccentricity: parseFloat('0.' + row.slice(26, 33)),
        argumentOfPerigee: parseFloat(row.slice(34, 42)),
        meanAnomaly: parseFloat(row.slice(43, 51)),
        meanMotion: parseFloat(row.slice(52, 63)),
        revolution: parseInt(row.slice(63, 68)),
    };
}
function _findRow(rows, rowNo) {
    var regExp = new RegExp("^".concat(rowNo, " "));
    var row = rows.find(function (row) { return row.match(regExp); });
    if (!row) {
        throw Error('Missing TLE row ' + rowNo);
    }
    return row;
}
function _parseExpString(expString) {
    var matches = expString.match(/^([ -]?)([0-9]+)(-[0-9])$/);
    if (matches) {
        var fixedString = matches[1] + '.' + matches[2] + 'e' + matches[3];
        return parseFloat(fixedString);
    }
    return parseFloat(expString);
}
