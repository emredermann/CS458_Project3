"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.circumstancesToJulianDay = exports.getTimeLocationCircumstances = exports.getTimeCircumstances = void 0;
var angleCalc_1 = require("../../utils/angleCalc");
var coordinateCalc_1 = require("../../coordinates/calculations/coordinateCalc");
var besselianElementsCalc_1 = require("./besselianElementsCalc");
function getTimeCircumstances(besselianElements, t) {
    var x = besselianElements.x, y = besselianElements.y, d = besselianElements.d, mu = besselianElements.mu, l1 = besselianElements.l1, l2 = besselianElements.l2;
    return {
        x: (0, besselianElementsCalc_1.populate)(x, t),
        dX: (0, besselianElementsCalc_1.populateD)(x, t),
        y: (0, besselianElementsCalc_1.populate)(y, t),
        dY: (0, besselianElementsCalc_1.populateD)(y, t),
        d: (0, besselianElementsCalc_1.populate)(d, t),
        dD: (0, besselianElementsCalc_1.populateD)(d, t),
        mu: (0, besselianElementsCalc_1.populate)(mu, t),
        dMu: (0, besselianElementsCalc_1.populateD)(mu, t),
        l1: (0, besselianElementsCalc_1.populate)(l1, t),
        dL1: (0, besselianElementsCalc_1.populateD)(l1, t),
        l2: (0, besselianElementsCalc_1.populate)(l2, t),
        dL2: (0, besselianElementsCalc_1.populateD)(l2, t),
    };
}
exports.getTimeCircumstances = getTimeCircumstances;
function getTimeLocationCircumstances(besselianElements, location, t) {
    var dT = besselianElements.dT, tanF1 = besselianElements.tanF1, tanF2 = besselianElements.tanF2;
    var lat = location.lat, lon = location.lon, elevation = location.elevation;
    var _a = getTimeCircumstances(besselianElements, t), x = _a.x, dX = _a.dX, y = _a.y, dY = _a.dY, mu = _a.mu, dMu = _a.dMu, d = _a.d, dD = _a.dD, l1 = _a.l1, l2 = _a.l2;
    var rhoSinLat = (0, coordinateCalc_1.getRhoSinLat)(lat, elevation);
    var rhoCosLat = (0, coordinateCalc_1.getRhoCosLat)(lat, elevation);
    var muRad = (0, angleCalc_1.deg2rad)(mu);
    var dMuRad = (0, angleCalc_1.deg2rad)(dMu);
    var dRad = (0, angleCalc_1.deg2rad)(d);
    var dDRad = (0, angleCalc_1.deg2rad)(dD);
    var lonRad = (0, angleCalc_1.deg2rad)(lon);
    var hRad = muRad + lonRad - (dT / 13713.440924999626077);
    var h = (0, angleCalc_1.rad2deg)(hRad);
    var xi = rhoCosLat * Math.sin(hRad);
    var eta = rhoSinLat * Math.cos(dRad) - rhoCosLat * Math.cos(hRad) * Math.sin(dRad);
    var zeta = rhoSinLat * Math.sin(dRad) + rhoCosLat * Math.cos(hRad) * Math.cos(dRad);
    var dXi = dMuRad * rhoCosLat * Math.cos(hRad);
    var dEta = dMuRad * xi * Math.sin(dRad) - zeta * dDRad;
    var u = x - xi;
    var v = y - eta;
    var a = dX - dXi;
    var b = dY - dEta;
    var l1Derived = l1 - zeta * tanF1;
    var l2Derived = l2 - zeta * tanF2;
    var n2 = Math.pow(a, 2) + Math.pow(b, 2);
    return { t: t, h: h, u: u, v: v, a: a, b: b, l1Derived: l1Derived, l2Derived: l2Derived, n2: n2 };
}
exports.getTimeLocationCircumstances = getTimeLocationCircumstances;
function circumstancesToJulianDay(besselianElements, circumstances) {
    var tMax = besselianElements.tMax, t0 = besselianElements.t0, dT = besselianElements.dT;
    var t = circumstances.t;
    var jd = Math.floor(tMax - t0 / 24.0);
    t = t + t0 - ((dT - 0.05) / 3600.0);
    if (t < 0.0) {
        jd--;
    }
    else if (t >= 24.0) {
        jd++;
    }
    return jd + (t + 12) / 24;
}
exports.circumstancesToJulianDay = circumstancesToJulianDay;
