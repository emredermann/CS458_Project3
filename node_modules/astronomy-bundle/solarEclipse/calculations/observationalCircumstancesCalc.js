"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTopocentricHorizontalCoordinates = exports.getObscuration = exports.getMoonSunRatio = exports.getMagnitude = exports.getMaximumEclipse = exports.getEclipseType = void 0;
var solarEclipseTypes_1 = require("../constants/solarEclipseTypes");
var coordinateCalc_1 = require("../../coordinates/calculations/coordinateCalc");
var circumstancesCalc_1 = require("./circumstancesCalc");
function getEclipseType(circumstances) {
    var l2Derived = circumstances.l2Derived;
    var maximumEclipse = getMaximumEclipse(circumstances);
    var magnitude = getMagnitude(circumstances);
    if (magnitude <= 0.0) {
        return solarEclipseTypes_1.SolarEclipseType.None;
    }
    if (maximumEclipse < l2Derived || maximumEclipse < -1 * l2Derived) {
        if (l2Derived < 0.0) {
            return solarEclipseTypes_1.SolarEclipseType.Total;
        }
        return solarEclipseTypes_1.SolarEclipseType.Annular;
    }
    return solarEclipseTypes_1.SolarEclipseType.Partial;
}
exports.getEclipseType = getEclipseType;
function getMaximumEclipse(circumstances) {
    var u = circumstances.u, v = circumstances.v;
    return Math.sqrt(Math.pow(u, 2) + Math.pow(v, 2));
}
exports.getMaximumEclipse = getMaximumEclipse;
function getMagnitude(circumstances) {
    var l1Derived = circumstances.l1Derived, l2Derived = circumstances.l2Derived;
    var maximumEclipse = getMaximumEclipse(circumstances);
    return (l1Derived - maximumEclipse) / (l1Derived + l2Derived);
}
exports.getMagnitude = getMagnitude;
function getMoonSunRatio(circumstances) {
    var l1Derived = circumstances.l1Derived, l2Derived = circumstances.l2Derived;
    return (l1Derived - l2Derived) / (l1Derived + l2Derived);
}
exports.getMoonSunRatio = getMoonSunRatio;
function getObscuration(circumstances) {
    var l1Derived = circumstances.l1Derived, l2Derived = circumstances.l2Derived;
    var eclipseType = getEclipseType(circumstances);
    var maximumEclipse = getMaximumEclipse(circumstances);
    var magnitude = getMagnitude(circumstances);
    var moonSunRatio = getMoonSunRatio(circumstances);
    if (magnitude <= 0.0) {
        return 0.0;
    }
    if (magnitude >= 1.0) {
        return 1.0;
    }
    if (eclipseType === solarEclipseTypes_1.SolarEclipseType.Annular) {
        return Math.pow(moonSunRatio, 2);
    }
    var cNumerator = Math.pow(l1Derived, 2) + Math.pow(l2Derived, 2) - 2 * Math.pow(maximumEclipse, 2);
    var cDenominator = Math.pow(l1Derived, 2) - Math.pow(l2Derived, 2);
    var c = Math.acos(cNumerator / cDenominator);
    var bNumerator = (l1Derived * l2Derived + Math.pow(maximumEclipse, 2)) / maximumEclipse;
    var bDenominator = l1Derived + l2Derived;
    var b = Math.acos(bNumerator / bDenominator);
    var a = Math.PI - b - c;
    var result = Math.pow(moonSunRatio, 2) * a + b - moonSunRatio * Math.sin(c);
    return result / Math.PI;
}
exports.getObscuration = getObscuration;
function getTopocentricHorizontalCoordinates(besselianElements, circumstances, location) {
    var t = circumstances.t, h = circumstances.h;
    var d = (0, circumstancesCalc_1.getTimeCircumstances)(besselianElements, t).d;
    var lat = location.lat;
    return (0, coordinateCalc_1.equatorialSpherical2topocentricHorizontalByLocalHourAngle)(h, d, lat);
}
exports.getTopocentricHorizontalCoordinates = getTopocentricHorizontalCoordinates;
