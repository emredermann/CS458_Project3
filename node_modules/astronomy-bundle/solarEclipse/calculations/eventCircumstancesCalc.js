"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimeLocationCircumstancesC4 = exports.getTimeLocationCircumstancesC3 = exports.getTimeLocationCircumstancesC2 = exports.getTimeLocationCircumstancesC1 = exports.getTimeLocationCircumstancesMaxEclipse = void 0;
var solarEclipseEvents_1 = require("../constants/solarEclipseEvents");
var math_1 = require("../../utils/math");
var solarEclipseTypes_1 = require("../constants/solarEclipseTypes");
var circumstancesCalc_1 = require("./circumstancesCalc");
var observationalCircumstancesCalc_1 = require("./observationalCircumstancesCalc");
function getTimeLocationCircumstancesMaxEclipse(besselianElements, location) {
    var circumstances = iterateCircumstancesMax(besselianElements, location);
    validateCircumstances(circumstances, location, solarEclipseEvents_1.SolarEclipseEventType.Mid);
    return circumstances;
}
exports.getTimeLocationCircumstancesMaxEclipse = getTimeLocationCircumstancesMaxEclipse;
function getTimeLocationCircumstancesC1(besselianElements, location) {
    var circumstances = iterateCircumstancesMax(besselianElements, location);
    validateCircumstances(circumstances, location, solarEclipseEvents_1.SolarEclipseEventType.C1);
    return iterateCircumstancesForContact(besselianElements, location, solarEclipseEvents_1.SolarEclipseEventType.C1);
}
exports.getTimeLocationCircumstancesC1 = getTimeLocationCircumstancesC1;
function getTimeLocationCircumstancesC2(besselianElements, location) {
    var circumstances = iterateCircumstancesMax(besselianElements, location);
    validateCircumstances(circumstances, location, solarEclipseEvents_1.SolarEclipseEventType.C2);
    return iterateCircumstancesForContact(besselianElements, location, solarEclipseEvents_1.SolarEclipseEventType.C2);
}
exports.getTimeLocationCircumstancesC2 = getTimeLocationCircumstancesC2;
function getTimeLocationCircumstancesC3(besselianElements, location) {
    var circumstances = iterateCircumstancesMax(besselianElements, location);
    validateCircumstances(circumstances, location, solarEclipseEvents_1.SolarEclipseEventType.C3);
    return iterateCircumstancesForContact(besselianElements, location, solarEclipseEvents_1.SolarEclipseEventType.C3);
}
exports.getTimeLocationCircumstancesC3 = getTimeLocationCircumstancesC3;
function getTimeLocationCircumstancesC4(besselianElements, location) {
    var circumstances = iterateCircumstancesMax(besselianElements, location);
    validateCircumstances(circumstances, location, solarEclipseEvents_1.SolarEclipseEventType.C4);
    return iterateCircumstancesForContact(besselianElements, location, solarEclipseEvents_1.SolarEclipseEventType.C4);
}
exports.getTimeLocationCircumstancesC4 = getTimeLocationCircumstancesC4;
function iterateCircumstancesMax(besselianElements, location) {
    var t = 0;
    var tau = 1;
    var cnt = 0;
    var circumstances = (0, circumstancesCalc_1.getTimeLocationCircumstances)(besselianElements, location, t);
    while (Math.abs(tau) > 0.000001 && cnt < 50) {
        var u = circumstances.u, v = circumstances.v, a = circumstances.a, b = circumstances.b, n2 = circumstances.n2;
        tau = (u * a + v * b) / n2;
        t -= tau;
        circumstances = (0, circumstancesCalc_1.getTimeLocationCircumstances)(besselianElements, location, t);
        cnt++;
    }
    return circumstances;
}
function iterateCircumstancesForContact(besselianElements, location, eventType) {
    var circumstancesMax = getTimeLocationCircumstancesMaxEclipse(besselianElements, location);
    var t = getTForContacts(circumstancesMax, eventType);
    var sign = getSign(circumstancesMax, eventType);
    var circumstances = (0, circumstancesCalc_1.getTimeLocationCircumstances)(besselianElements, location, t);
    var tau = 1;
    var cnt = 0;
    while (Math.abs(tau) > 0.000001 && cnt < 50) {
        var u = circumstances.u, v = circumstances.v, a = circumstances.a, b = circumstances.b, n2 = circumstances.n2;
        var lParamDerived = getLDerived(circumstances, eventType);
        var n = Math.sqrt(n2);
        tau = (v * a - u * b) / (n * lParamDerived);
        if (Math.abs(tau) <= 1.0) {
            tau = sign * Math.sqrt(1.0 - Math.pow(tau, 2)) * lParamDerived / n;
        }
        else {
            tau = 0.0;
        }
        t -= (u * a + v * b) / n2 - tau;
        circumstances = (0, circumstancesCalc_1.getTimeLocationCircumstances)(besselianElements, location, t);
        cnt++;
    }
    return circumstances;
}
function getTForContacts(circumstancesMax, eventType) {
    var t = circumstancesMax.t, l2Derived = circumstancesMax.l2Derived;
    var tauD = getTauForEclipseContacts(circumstancesMax, eventType);
    if (eventType === solarEclipseEvents_1.SolarEclipseEventType.C2 || eventType === solarEclipseEvents_1.SolarEclipseEventType.C3) {
        if (l2Derived < 0.0) {
            return t + tauD;
        }
    }
    return t - tauD;
}
function getTauForEclipseContacts(circumstancesMax, eventType) {
    var u = circumstancesMax.u, v = circumstancesMax.v, a = circumstancesMax.a, b = circumstancesMax.b, n2 = circumstancesMax.n2;
    var lDerived = getLDerived(circumstancesMax, eventType);
    var n = Math.sqrt(n2);
    var tau = (v * a - u * b) / (n * lDerived);
    if (Math.abs(tau) > 1.0) {
        return 0.0;
    }
    return Math.sqrt(1.0 - Math.pow(tau, 2)) * lDerived / n;
}
function getSign(circumstancesMax, eventType) {
    var sign = (eventType === solarEclipseEvents_1.SolarEclipseEventType.C1 || eventType === solarEclipseEvents_1.SolarEclipseEventType.C2) ? -1 : 1;
    if (eventType === solarEclipseEvents_1.SolarEclipseEventType.C2 || eventType === solarEclipseEvents_1.SolarEclipseEventType.C3) {
        var l2Derived = circumstancesMax.l2Derived;
        if (l2Derived < 0.0) {
            return -1 * sign;
        }
    }
    return sign;
}
function getLDerived(circumstances, eventType) {
    var l1Derived = circumstances.l1Derived, l2Derived = circumstances.l2Derived;
    if (eventType === solarEclipseEvents_1.SolarEclipseEventType.C1 || eventType === solarEclipseEvents_1.SolarEclipseEventType.C4) {
        return l1Derived;
    }
    return l2Derived;
}
function validateCircumstances(circumstances, location, eventType) {
    var lat = location.lat, lon = location.lon;
    var eclipseType = (0, observationalCircumstancesCalc_1.getEclipseType)(circumstances);
    if (eclipseType === solarEclipseTypes_1.SolarEclipseType.None) {
        throw new Error("No eclipse visible at ".concat((0, math_1.round)(lat, 5), ", ").concat((0, math_1.round)(lon, 5)));
    }
    if (eclipseType === solarEclipseTypes_1.SolarEclipseType.Partial) {
        if (eventType === solarEclipseEvents_1.SolarEclipseEventType.C2) {
            throw new Error("No C2 possible. Eclipse is only partial at ".concat((0, math_1.round)(lat, 5), ", ").concat((0, math_1.round)(lon, 5)));
        }
        if (eventType === solarEclipseEvents_1.SolarEclipseEventType.C3) {
            throw new Error("No C3 possible. Eclipse is only partial at ".concat((0, math_1.round)(lat, 5), ", ").concat((0, math_1.round)(lon, 5)));
        }
    }
}
